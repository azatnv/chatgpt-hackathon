from telebot import types
from telebot.async_telebot import AsyncTeleBot
import os
from dotenv import load_dotenv, find_dotenv

from inline_buttons import init_keyboard_client
from inline_buttons.inline_buttons import keyboard_client
from main import get_events, get_communities, all_groups
from utlis import get_date_string

load_dotenv(find_dotenv())
#–ó–∞–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DATABASE_URL= os.environ.get('DATABASE_URL')
DATABASE_USER= os.environ.get('DATABASE_USER')
DATABASE_PASSWORD= os.environ.get('DATABASE_PASSWORD')
DATABASE_HOST= os.environ.get('DATABASE_HOST')
DATABASE_PORT= os.environ.get('DATABASE_PORT')
BOT_TOKEN = os.environ.get('BOT_TOKEN')
bot = AsyncTeleBot(BOT_TOKEN)


@bot.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id)
    # logo_path ="./data/logo.jpg"
    await bot.send_message(
        message.chat.id,
        """
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 

–Ø —Å–æ–±–∏—Ä–∞—é –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ò–¢–ú–û –∏ –æ—Ç–¥–∞—é –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Å–º–æ–∂–µ—à—å –∏–∑—É—á–∏—Ç—å –∑–∞ 3 –º–∏–Ω—É—Ç—ã. 

–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ —Å–∞–º–∏–º –∏—Å–∫–∞—Ç—å ¬´—Ç–æ —Å–∞–º–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ¬ª –∏ —Ç—Ä–∞—Ç–∏—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è.

–ü—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ–±—É–π.""",
        # parse_mode="HTML",
        reply_markup = init_keyboard_client
    )


@bot.message_handler(regexp=r"^–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def send_tree_nearest_events(message):
    pre_speech = "–û–±—Ä–∞–¥—É–π—Ç–µ —Å–µ–±—è –∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! –ù–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"
    events = get_events()
    event_list = []
    for i, event in enumerate(events, start = 1):
        post_url = event[0]
        event_title = event[1]
        event_date = get_date_string(event[2])
        event_place = f"üìç {event[3]}" if event[3] else ""
        event_short_desc = event[4]
        comm_name = event[6]
        event_text =\
            f"\n\n‚ö°Ô∏è{comm_name} | <a href='{post_url}'>{event_title}</a>"\
            f"\nüóì {event_date} {event_place}"\
            f"\n{event_short_desc}"
        event_list.append(event_text)
    await bot.send_message(
        message.chat.id,
        f"{pre_speech}"
        f"{''.join(event_list)}",
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=keyboard_client
    )


@bot.message_handler(regexp=r"^–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
async def send_groups_info(message):
    communities = all_groups
    communities_list = "\n".join([i[0] for i in communities])
    await bot.send_message(
        message.chat.id,
        f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:\n{communities_list}"
    )
    

@bot.message_handler()
async def echo_all(message: types.Message):
    # await bot.delete_message(message.chat.id, message.message_id)
    pass


print("bot started >>> GO,GO,GO!")
import asyncio
asyncio.run(bot.polling())