import re
import os

from telebot import types
from telebot.async_telebot import AsyncTeleBot
from dotenv import load_dotenv, find_dotenv

from inline_buttons import init_keyboard
from inline_buttons.inline_buttons import link_to_menu_keyboard, menu_keyboard
from main import get_tree_nearest_events, all_groups, get_current_week_events, get_next_week_events, \
    set_suggested_event_source, set_suggested_functionality
from utils import get_date_string, UserStates

load_dotenv(find_dotenv())
#  –ó–∞–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DATABASE_URL= os.environ.get('DATABASE_URL')
DATABASE_USER= os.environ.get('DATABASE_USER')
DATABASE_PASSWORD= os.environ.get('DATABASE_PASSWORD')
DATABASE_HOST= os.environ.get('DATABASE_HOST')
DATABASE_PORT= os.environ.get('DATABASE_PORT')
BOT_TOKEN = os.environ.get('BOT_TOKEN')
bot = AsyncTeleBot(BOT_TOKEN)


@bot.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await bot.set_state(message.from_user.id, UserStates.default, message.chat.id)
    await bot.delete_message(message.chat.id, message.message_id)
    await bot.send_message(
        message.chat.id,
        """
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 

–Ø —Å–æ–±–∏—Ä–∞—é –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ò–¢–ú–û –∏ –æ—Ç–¥–∞—é –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Å–º–æ–∂–µ—à—å –∏–∑—É—á–∏—Ç—å –∑–∞ 3 –º–∏–Ω—É—Ç—ã. 

–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ —Å–∞–º–∏–º –∏—Å–∫–∞—Ç—å ¬´—Ç–æ —Å–∞–º–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ¬ª –∏ —Ç—Ä–∞—Ç–∏—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è.

–ü—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ–±—É–π.""",
        reply_markup = init_keyboard
    )
    await bot.send_message(
        message.chat.id,
        """
–ü–æ–∫–∞ —á—Ç–æ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ, –º—ã –¥–æ–¥–µ–ª—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, —Å–∫–æ—Ä–æ –≤—Å–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –Ω–∞–¥–æ.
–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å –Ω–∞–º–∏, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–º –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º!
"""
    )


@bot.message_handler(regexp=r"^–ú–µ–Ω—é")
async def menu(message: types.Message):
    await bot.set_state(message.from_user.id, UserStates.default, message.chat.id)
    await bot.delete_message(message.chat.id, message.message_id)
    await bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        disable_web_page_preview=True,
        reply_markup=menu_keyboard
    )


@bot.message_handler(regexp=r"^–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def send_tree_nearest_events(message):
    pre_speech = "Levart –ø–æ–¥–æ–±—Ä–∞–ª –∞–Ω–æ–Ω—Å—ã —Å–∞–º—ã—Ö –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:"
    events = get_tree_nearest_events()
    event_list = []
    for i, event in enumerate(events, start=1):
        post_url = event[0]
        event_title = event[1]
        event_date = get_date_string(event[2])
        event_place = f"üìç {event[3]}" if event[3] else ""
        event_short_desc = event[4]
        comm_name = event[6]
        event_text = \
            f"\n\n‚ö°Ô∏è{comm_name} | <a href='{post_url}'>{event_title}</a>" \
            f"\nüóì {event_date} {event_place}" \
            f"\n{event_short_desc}"
        event_list.append(event_text)
    await bot.send_message(
        message.chat.id,
        f"{pre_speech}"
        f"{''.join(event_list)}",
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=link_to_menu_keyboard
    )


@bot.message_handler(regexp=r"^–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è")
async def current_week_events(message):
    pre_speech = "–ê–Ω–æ–Ω—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –¢–ï–ö–£–©–£–Æ –Ω–µ–¥–µ–ª—é:"
    events = get_current_week_events()
    event_list = []
    for i, event in enumerate(events, start=1):
        post_url = event[0]
        event_title = event[1]
        event_date = get_date_string(event[2])
        event_place = f"üìç {event[3]}" if event[3] else ""
        event_short_desc = event[4]
        comm_name = event[6]
        event_text = \
            f"\n\n‚ö°Ô∏è{comm_name} | <a href='{post_url}'>{event_title}</a>" \
            f"\nüóì {event_date} {event_place}" \
            f"\n{event_short_desc}"
        event_list.append(event_text)
    await bot.send_message(
        message.chat.id,
        f"{pre_speech}"
        f"{''.join(event_list)}",
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=link_to_menu_keyboard
    )


@bot.message_handler(regexp=r"^–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è")
async def next_week_events(message):
    pre_speech = "–ê–Ω–æ–Ω—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –°–õ–ï–î–£–Æ–©–£–Æ –Ω–µ–¥–µ–ª—é:"
    events = get_next_week_events()
    event_list = []
    for i, event in enumerate(events, start=1):
        post_url = event[0]
        event_title = event[1]
        event_date = get_date_string(event[2])
        event_place = f"üìç {event[3]}" if event[3] else ""
        event_short_desc = event[4]
        comm_name = event[6]
        event_text = \
            f"\n\n‚ö°Ô∏è{comm_name} | <a href='{post_url}'>{event_title}</a>" \
            f"\nüóì {event_date} {event_place}" \
            f"\n{event_short_desc}"
        event_list.append(event_text)
    await bot.send_message(
        message.chat.id,
        f"{pre_speech}"
        f"{''.join(event_list)}",
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=link_to_menu_keyboard
    )


@bot.message_handler(regexp=r"^–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
async def send_groups_info(message):
    communities = all_groups
    communities_list = []
    for i in communities:
        communities_text = f" üåê {i[0]}"
        communities_list.append(communities_text)
    communities_text = "\n".join(communities_list)
    await bot.send_message(
        message.chat.id,
        f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:\n\n{communities_text}",
        disable_web_page_preview=True,
        reply_markup=link_to_menu_keyboard
    )


@bot.message_handler(regexp=r"^–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ")
async def suggest_improvement(message):
    suggest_menu_inline_keyboard = types.InlineKeyboardMarkup()
    suggest_event_source_button = types.InlineKeyboardButton("–ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", callback_data=str(UserStates.suggest_source))
    suggest_functionality_button = types.InlineKeyboardButton("–ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª", callback_data=str(UserStates.suggest_functionality))
    menu_inline_button = types.InlineKeyboardButton("–ú–µ–Ω—é", callback_data=str(UserStates.default))
    suggest_menu_inline_keyboard.add(suggest_event_source_button).add(suggest_functionality_button).add(menu_inline_button)
    await bot.send_message(
        message.chat.id,
        "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ:",
        disable_web_page_preview=True,
        reply_markup=suggest_menu_inline_keyboard
    )


@bot.callback_query_handler(func=lambda call: True)
async def suggest_query_handler(call):
    if call.data == str(UserStates.suggest_source):
        await bot.answer_callback_query(
            call.id,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫"
        )
        await bot.send_message(
            call.message.chat.id,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:"
        )
        await bot.set_state(call.from_user.id, UserStates.suggest_source, call.message.chat.id)
    if call.data == str(UserStates.suggest_functionality):
        await bot.answer_callback_query(
            call.id,
            "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"
        )
        await bot.send_message(
            call.message.chat.id,
            "–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –≤–∏–¥–µ—Ç—å –≤ –±—É–¥—É—â–µ–º?"
        )
        await bot.set_state(call.from_user.id, UserStates.suggest_functionality, call.message.chat.id)
    if call.data == str(UserStates.default):
        await bot.set_state(call.from_user.id, UserStates.default, call.message.chat.id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(
            call.message.chat.id,
            "–ú–µ–Ω—é:",
            disable_web_page_preview=True,
            reply_markup=link_to_menu_keyboard
        )


@bot.message_handler()
async def echo_all(message: types.Message):
    user_state = await bot.get_state(message.from_user.id, message.chat.id)
    user_id = message.from_user.id
    username = message.from_user.username
    user_message_text = message.text
    if str(user_state) == str(UserStates.suggest_source):
        if user_message_text.startswith("http"):
            user_url_message_modified = user_message_text
        else:
            user_url_message_modified = "http://" + user_message_text
        regex = re.compile(
            r'^https?://'  # http:// or https://
            r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?)' #domain
            r'(?:/?|[/?]\S+)$', re.IGNORECASE)
        if regex.search(user_url_message_modified):
            await bot.set_state(user_id, UserStates.default, message.chat.id)
            await bot.send_message(
                message.chat.id,
                "–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!",
                disable_web_page_preview=True,
                reply_markup=link_to_menu_keyboard
            )
            set_suggested_event_source(user_id, username, user_message_text)
        else:
            await bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É"
            )
    elif str(user_state) == str(UserStates.suggest_functionality):
        await bot.set_state(user_id, UserStates.default, message.chat.id)
        await bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≤–µ—Ç—ã! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–¥—É–º–∞–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –µ—â–µ –ª—É—á—à–µ",
            disable_web_page_preview=True,
            reply_markup=link_to_menu_keyboard
        )
        set_suggested_functionality(user_id, username, user_message_text)
    else:
        await bot.delete_message(message.chat.id, message.message_id)
        await bot.send_message(
            message.chat.id,
            "–ú–µ–Ω—é:",
            disable_web_page_preview=True,
            reply_markup=link_to_menu_keyboard
        )


print("bot started >>> GO,GO,GO!")
import asyncio
asyncio.run(bot.polling())