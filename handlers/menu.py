from keyboard_buttons import menu_keyboard
from dao import set_user_last_date, get_actual_events, all_groups
from utils import UserStates, get_event_list_message_text
from telebot import types


def run(bot):
    @bot.message_handler(regexp=r"^–ú–µ–Ω—é")
    async def menu(message):
        set_user_last_date(message.from_user.id, message.from_user.username)

        await bot.set_state(message.from_user.id, UserStates.default, message.chat.id)
        await bot.delete_message(message.chat.id, message.message_id)
        await bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            disable_web_page_preview=True,
            reply_markup=menu_keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data == str(UserStates.default))
    async def menu_query_handler(call):
        await bot.set_state(call.from_user.id, UserStates.default, call.message.chat.id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.answer_callback_query(call.id)
        await bot.send_message(
            call.message.chat.id,
            "–ú–µ–Ω—é:",
            disable_web_page_preview=True,
            reply_markup=menu_keyboard
        )

    @bot.message_handler(regexp=r"^–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    async def get_events(message):
        set_user_last_date(message.from_user.id, message.from_user.username, "event")

        is_brief_needed = False
        if {"–∫—Ä–∞—Ç–∫–æ", "–∫–æ—Ä–æ—Ç–∫–æ", "–±—Ä–∏—Ñ", "—Å–≤–æ–¥–∫–∞"} & set(message.text.lower().split()):
            is_brief_needed = True

        events = get_actual_events()

        events_inline_keyboard = types.InlineKeyboardMarkup()
        current_week_events_calendar_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
                                                                         callback_data=str(
                                                                             UserStates.add_to_calendar_all))
        menu_inline_button = types.InlineKeyboardButton("–ú–µ–Ω—é", callback_data=str(UserStates.default))
        if len(events) > 4:
            events_next_page_button = types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data=f"next_events_page_0_{1 if is_brief_needed else 0}")
            events_inline_keyboard.add(events_next_page_button)
            events = events[:4]
        events_inline_keyboard.add(current_week_events_calendar_button, menu_inline_button, row_width=1)

        pre_speech = "–ê–Ω–æ–Ω—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:"
        event_list = get_event_list_message_text(events, brief=is_brief_needed)
        await bot.send_message(
            message.chat.id,
            f"{pre_speech}"
            f"{''.join(event_list)}",
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=events_inline_keyboard
        )

    @bot.message_handler(regexp=r"^–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
    async def send_groups_info(message):
        set_user_last_date(message.from_user.id, message.from_user.username, "community")

        communities = all_groups
        communities_list = {"vk": [], "tg": []}
        for i in communities:
            if i[3]:
                communities_list["tg"].append(f" üåê {i[0]}")
            else:
                communities_list["vk"].append(f" üåê {i[0]}")
        communities_text = "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ:\n"
        communities_text += "\n".join(communities_list["vk"])
        communities_text += "\n\nTelegram:\n"
        communities_text += "\n".join(communities_list["tg"])
        await bot.send_message(
            message.chat.id,
            f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:\n\n{communities_text}",
            disable_web_page_preview=True,
            reply_markup=menu_keyboard
        )

    @bot.message_handler(regexp=r"^–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ")
    async def suggest_improvement(message):
        set_user_last_date(message.from_user.id, message.from_user.username)

        suggest_menu_inline_keyboard = types.InlineKeyboardMarkup()
        suggest_event_source_button = types.InlineKeyboardButton("–ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫",
                                                                 callback_data=str(UserStates.suggest_source))
        suggest_functionality_button = types.InlineKeyboardButton("–ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª",
                                                                  callback_data=str(UserStates.suggest_functionality))
        menu_inline_button = types.InlineKeyboardButton("–ú–µ–Ω—é", callback_data=str(UserStates.default))
        suggest_menu_inline_keyboard.add(suggest_event_source_button, suggest_functionality_button, menu_inline_button,
                                         row_width=1)
        await bot.send_message(
            message.chat.id,
            "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ:",
            disable_web_page_preview=True,
            reply_markup=suggest_menu_inline_keyboard
        )
