import re

from dao import log_action, get_user_push_tags, set_user_push_tags, set_push_interval, check_new_user
from keyboard_buttons import menu_keyboard
from utils import UserStates, tag_id2text
from telebot import types


def run(bot):
    @bot.message_handler(commands=["start"])
    async def start_bot(message):
        check_new_user(message.from_user.id, message.from_user.username)

        log_action("start", message.from_user.id, message.from_user.username)

        await bot.set_state(message.from_user.id, UserStates.default, message.chat.id)
        await bot.delete_message(message.chat.id, message.message_id)

        tags_select_buttons = list()
        user_tags = get_user_push_tags(message.from_user.id)

        if len(user_tags) == 0:
            for tag_id in tag_id2text:
                tags_select_buttons.append(types.InlineKeyboardButton(f"‚úÖ {tag_id2text[tag_id]}",
                                                                      callback_data=f"notifications_topic_{tag_id}"))
        else:
            for tag_id in tag_id2text:
                if tag_id in user_tags:
                    tags_select_buttons.append(types.InlineKeyboardButton(f"‚úÖ {tag_id2text[tag_id]}",
                                                                          callback_data=f"notifications_topic_{tag_id}"))
                else:
                    tags_select_buttons.append(types.InlineKeyboardButton(tag_id2text[tag_id],
                                                                          callback_data=f"notifications_topic_{tag_id}"))
        notifications_topic_save_button = types.InlineKeyboardButton("–î–∞–ª–µ–µ >",
                                                                     callback_data=f"start_save_notifications_topic")

        notifications_inline_keyboard = types.InlineKeyboardMarkup().add(*tags_select_buttons, row_width=2)
        notifications_inline_keyboard.add(notifications_topic_save_button)

        await bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã:",
            reply_markup=notifications_inline_keyboard
        )

    @bot.callback_query_handler(func=lambda call: "start_save_notifications_topic" == call.data)
    async def save_tags_select_query_handler(call):
        tags_select_keyboard = call.message.reply_markup.keyboard
        buttons_list = [button for sublist in tags_select_keyboard for button in sublist]
        selected_tags = list()
        for button in buttons_list:
            if "‚úÖ" in button.text:
                selected_tags.append(button.text.replace("‚úÖ ", ""))
        if len(selected_tags) == 0:
            await bot.answer_callback_query(
                call.id,
                "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã",
                show_alert=True
            )
        else:
            tag_ids = list()
            for tag in selected_tags:
                key = list(filter(lambda x: tag_id2text[x] == tag, tag_id2text))[0]
                tag_ids.append(key)
            set_user_push_tags(call.from_user.id, tag_ids)
            await bot.answer_callback_query(call.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            await bot.delete_message(call.message.chat.id, call.message.message_id)
            await bot.send_message(
                call.message.chat.id,
                "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
            )

            notifications_schedule_button_1 = types.InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
                                                                         callback_data="start_notifications_schedule_1")
            notifications_schedule_button_2 = types.InlineKeyboardButton("–ö–∞–∂–¥—ã–µ 3 –¥–Ω—è",
                                                                         callback_data="start_notifications_schedule_2")
            notifications_schedule_button_3 = types.InlineKeyboardButton("–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
                                                                         callback_data="start_notifications_schedule_3")
            notifications_schedule_button_4 = types.InlineKeyboardButton("–†–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏",
                                                                         callback_data="start_notifications_schedule_4")
            notifications_schedule_button_5 = types.InlineKeyboardButton("–ù–∏–∫–æ–≥–¥–∞",
                                                                         callback_data="start_notifications_schedule_5")

            notifications_inline_keyboard = types.InlineKeyboardMarkup().add(notifications_schedule_button_1,
                                                                             notifications_schedule_button_2,
                                                                             notifications_schedule_button_3,
                                                                             notifications_schedule_button_4,
                                                                             row_width=2)
            notifications_inline_keyboard.add(notifications_schedule_button_5)

            await bot.send_message(
                call.message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —á–∞—Å—Ç–æ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö:",
                reply_markup=notifications_inline_keyboard
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("start_notifications_schedule_"))
    async def notifications_schedule_select_query_handler(call):
        await bot.answer_callback_query(call.id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)

        call_data_search = re.search('notifications_schedule_(.+?)', call.data)
        n_button = int(call_data_search.group(1))

        if n_button == 1:
            set_push_interval(call.from_user.id, 1)
            await bot.send_message(
                call.message.chat.id,
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
            )
        if n_button == 2:
            set_push_interval(call.from_user.id, 3)
            await bot.send_message(
                call.message.chat.id,
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è"
            )
        if n_button == 3:
            set_push_interval(call.from_user.id, 7)
            await bot.send_message(
                call.message.chat.id,
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é"
            )
        if n_button == 4:
            set_push_interval(call.from_user.id, 14)
            await bot.send_message(
                call.message.chat.id,
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ä–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏"
            )
        if n_button == 5:
            set_push_interval(call.from_user.id, 0)
            await bot.send_message(
                call.message.chat.id,
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"
            )

        await bot.send_message(
            call.message.chat.id,
            """
–ì–æ—Ç–æ–≤–æ! ‚úÖ

–° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ò–¢–ú–û —Å —Ç–æ–±–æ–π –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.

–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º:
üóÇ –í—Å–µ —Ç–µ–º—ã - /all
üß† –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - /edu
üíµ –ë–∏–∑–Ω–µ—Å, –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ - /money
üìà –ö–∞—Ä—å–µ—Ä–∞ - /career
üíÉ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è - /fun
‚öΩÔ∏è –°–ø–æ—Ä—Ç - /sport
üëÄ –û—Å—Ç–∞–ª—å–Ω–æ–µ - /other

–í—ã–≤–µ—Å—Ç–∏ –≤ –≤–∏–¥–µ –Ω–µ–¥–µ–ª–∏ - /brief

–ú—ã —Å–æ–≤–µ—Ç—É–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–µ –∑–∞–±—ã—Ç—å‚ùóÔ∏è

–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .ICS - /ics
            """,
            reply_markup=menu_keyboard
        )
