import re

from dao import log_action, all_groups, get_user_selected_comm, set_user_selected_comm, set_push_interval, \
    get_user_push_tags, set_user_push_tags
from telebot import types

from keyboard_buttons import menu_keyboard
from utils import tag_id2text


def run(bot):
    @bot.callback_query_handler(func=lambda call: "settings_notifications" == call.data)
    async def settings_notifications_query_handler(call):
        await bot.answer_callback_query(call.id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)

        log_action("settings_notifications", call.from_user.id, call.from_user.username)

        notifications_schedule_button = types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                                                                   callback_data="notifications_schedule")
        notifications_topic_button = types.InlineKeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
                                                                callback_data="notifications_topic")

        notifications_inline_keyboard = types.InlineKeyboardMarkup().add(notifications_schedule_button,
                                                                         notifications_topic_button, row_width=1)

        await bot.send_message(
            call.message.chat.id,
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            reply_markup=notifications_inline_keyboard
        )

    @bot.callback_query_handler(func=lambda call: "notifications_schedule" == call.data)
    async def notifications_schedule_query_handler(call):
        await bot.answer_callback_query(call.id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)

        log_action("notifications_schedule", call.from_user.id, call.from_user.username)

        notifications_schedule_button_1 = types.InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
                                                                     callback_data="notifications_schedule_1")
        notifications_schedule_button_2 = types.InlineKeyboardButton("–ö–∞–∂–¥—ã–µ 3 –¥–Ω—è",
                                                                     callback_data="notifications_schedule_2")
        notifications_schedule_button_3 = types.InlineKeyboardButton("–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
                                                                     callback_data="notifications_schedule_3")
        notifications_schedule_button_4 = types.InlineKeyboardButton("–†–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏",
                                                                     callback_data="notifications_schedule_4")
        notifications_schedule_button_5 = types.InlineKeyboardButton("–ù–∏–∫–æ–≥–¥–∞",
                                                                     callback_data="notifications_schedule_5")

        notifications_inline_keyboard = types.InlineKeyboardMarkup().add(notifications_schedule_button_1,
                                                                         notifications_schedule_button_2,
                                                                         notifications_schedule_button_3,
                                                                         notifications_schedule_button_4, row_width=2)
        notifications_inline_keyboard.add(notifications_schedule_button_5)

        await bot.send_message(
            call.message.chat.id,
            "–ö–∞–∫ —á–∞—Å—Ç–æ –º–Ω–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∞–Ω–æ–Ω—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=notifications_inline_keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("notifications_schedule_"))
    async def notifications_schedule_select_query_handler(call):
        await bot.answer_callback_query(call.id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)

        call_data_search = re.search('notifications_schedule_(.+?)', call.data)
        n_button = int(call_data_search.group(1))

        if n_button == 1:
            set_push_interval(call.from_user.id, 1)
            await bot.send_message(
                call.message.chat.id,
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
                reply_markup=menu_keyboard
            )
        if n_button == 2:
            set_push_interval(call.from_user.id, 3)
            await bot.send_message(
                call.message.chat.id,
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è",
                reply_markup=menu_keyboard
            )
        if n_button == 3:
            set_push_interval(call.from_user.id, 7)
            await bot.send_message(
                call.message.chat.id,
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é",
                reply_markup=menu_keyboard
            )
        if n_button == 4:
            set_push_interval(call.from_user.id, 14)
            await bot.send_message(
                call.message.chat.id,
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ä–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏",
                reply_markup=menu_keyboard
            )
        if n_button == 5:
            set_push_interval(call.from_user.id, 0)
            await bot.send_message(
                call.message.chat.id,
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã",
                reply_markup=menu_keyboard
            )

    @bot.callback_query_handler(func=lambda call: "notifications_topic" == call.data)
    async def notifications_topic_query_handler(call):
        await bot.answer_callback_query(call.id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)

        log_action("notifications_topic", call.from_user.id, call.from_user.username)

        tags_select_buttons = list()
        user_tags = get_user_push_tags(call.from_user.id)

        if len(user_tags) == 0:
            for tag_id in tag_id2text:
                tags_select_buttons.append(types.InlineKeyboardButton(f"‚úÖ {tag_id2text[tag_id]}",
                                                                      callback_data=f"notifications_topic_{tag_id}"))
        else:
            for tag_id in tag_id2text:
                if tag_id in user_tags:
                    tags_select_buttons.append(types.InlineKeyboardButton(f"‚úÖ {tag_id2text[tag_id]}",
                                                                          callback_data=f"notifications_topic_{tag_id}"))
                else:
                    tags_select_buttons.append(types.InlineKeyboardButton(tag_id2text[tag_id],
                                                                          callback_data=f"notifications_topic_{tag_id}"))
        notifications_topic_save_button = types.InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ",
                                                                     callback_data=f"save_notifications_topic")

        notifications_inline_keyboard = types.InlineKeyboardMarkup().add(*tags_select_buttons, row_width=2)
        notifications_inline_keyboard.add(notifications_topic_save_button)

        await bot.send_message(
            call.message.chat.id,
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö:",
            reply_markup=notifications_inline_keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("notifications_topic_"))
    async def tags_select_query_handler(call):
        await bot.answer_callback_query(call.id)

        tags_select_keyboard = call.message.reply_markup.keyboard
        buttons_list = [button for sublist in tags_select_keyboard for button in sublist]
        for i, button in enumerate(buttons_list, start=0):
            if button.callback_data != call.data:
                continue
            else:
                if "‚úÖ" in button.text:
                    button.text = button.text.replace("‚úÖ ", "")
                else:
                    button.text = "‚úÖ " + button.text
                tags_select_keyboard[i // 2][i % 2] = button
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.id,
                                            reply_markup=types.InlineKeyboardMarkup(tags_select_keyboard))

    @bot.callback_query_handler(func=lambda call: "save_notifications_topic" == call.data)
    async def save_tags_select_query_handler(call):
        tags_select_keyboard = call.message.reply_markup.keyboard
        buttons_list = [button for sublist in tags_select_keyboard for button in sublist]
        selected_tags = list()
        for button in buttons_list:
            if "‚úÖ" in button.text:
                selected_tags.append(button.text.replace("‚úÖ ", ""))
        if len(selected_tags) == 0:
            await bot.answer_callback_query(
                call.id,
                "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã",
                show_alert=True
            )
        else:
            tag_ids = list()
            for tag in selected_tags:
                key = list(filter(lambda x: tag_id2text[x] == tag, tag_id2text))[0]
                tag_ids.append(key)
            set_user_push_tags(call.from_user.id, tag_ids)
            await bot.answer_callback_query(call.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            await bot.delete_message(call.message.chat.id, call.message.message_id)
            await bot.send_message(
                call.message.chat.id,
                "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                reply_markup=menu_keyboard
            )

    @bot.callback_query_handler(func=lambda call: "settings_communities" == call.data)
    async def settings_communities_query_handler(call):
        await bot.answer_callback_query(call.id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)

        log_action("settings_communities", call.from_user.id, call.from_user.username)

        comm_select_buttons = list()
        user_communities = get_user_selected_comm(call.from_user.id)
        communities = all_groups
        if len(user_communities) == 0:
            for i, comm in enumerate(communities, start=0):
                comm_select_button = types.InlineKeyboardButton(f"‚úÖ {comm[0]}", callback_data=f"comm_select_button_{i}")
                comm_select_buttons.append(comm_select_button)
        else:
            for i, comm in enumerate(communities, start=0):
                if comm[0] in user_communities:
                    comm_select_button = types.InlineKeyboardButton(f"‚úÖ {comm[0]}",
                                                                    callback_data=f"comm_select_button_{i}")
                else:
                    comm_select_button = types.InlineKeyboardButton(comm[0],
                                                                    callback_data=f"comm_select_button_{i}")
                comm_select_buttons.append(comm_select_button)

        comm_select_keyboard = types.InlineKeyboardMarkup().add(*comm_select_buttons, row_width=1)
        comm_select_save_button = types.InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ", callback_data=f"save_comm_select")
        comm_select_keyboard.add(comm_select_save_button)

        await bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=comm_select_keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("comm_select_button_"))
    async def comm_select_query_handler(call):
        await bot.answer_callback_query(call.id)

        comm_select_keyboard = call.message.reply_markup.keyboard
        buttons_list = [button for sublist in comm_select_keyboard for button in sublist]
        for i, button in enumerate(buttons_list, start=0):
            if button.callback_data != call.data:
                continue
            else:
                if "‚úÖ" in button.text:
                    button.text = button.text.replace("‚úÖ ", "")
                else:
                    button.text = "‚úÖ " + button.text
                comm_select_keyboard[i][0] = button
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.id,
                                            reply_markup=types.InlineKeyboardMarkup(comm_select_keyboard))

    @bot.callback_query_handler(func=lambda call: "save_comm_select" == call.data)
    async def save_comm_select_query_handler(call):
        comm_select_keyboard = call.message.reply_markup.keyboard
        buttons_list = [button for sublist in comm_select_keyboard for button in sublist]
        selected_communities = list()
        for button in buttons_list:
            if "‚úÖ" in button.text:
                selected_communities.append(button.text.replace("‚úÖ ", ""))
        if len(selected_communities) == 0:
            await bot.answer_callback_query(
                call.id,
                "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã",
                show_alert=True
            )
        else:
            set_user_selected_comm(call.from_user.id, selected_communities)
            await bot.answer_callback_query(call.id, "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            await bot.delete_message(call.message.chat.id, call.message.message_id)
            await bot.send_message(
                call.message.chat.id,
                "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                reply_markup=menu_keyboard
            )
